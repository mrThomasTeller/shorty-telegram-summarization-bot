Release 0.4:
  ✔ зарефакторить на RxJS @done(23-10-04 13:15)
  ✔ настроить резервное копирование БД @done(23-10-04 17:54)
  ✔ логи @done(23-10-08 15:11)
  ✔ вынести тексты в отдельные файлы @done(23-10-02 16:05)
  ✔ strict eslint rules (any, cognitive complexity, etc) @done(23-09-26 22:10)
  ✔ update prisma @done(23-09-26 22:10)
  - просмотр логов с телефона
  - писать логи в файлы

Release 0.5:
  - ограничить количество запросов к боту
  - бот должен собирать сообщения начиная с последнего запроса
  - Установить лимит на минимальное кол-во сообщений
  - возможность сообщить об ошибке или отправить предложение по улучшению

Release 0.7:
  - приветственное сообщение: encode, share, issues+предложения (https://fider.io/, discord, google form, tg)
  - шифрование сообщений

Release 1.0:
  - проработать вопрос харнения у себя перс. данных
  - подробная справка
  - проработать вопрос с рекламой

Release 1.1:
  - рассылка новостей
  - очистка базы данных
  - мониторинг состояния: количество потраченных денег, в скольких чатах состоит, активность пользователей, ошибки

Backlog:
  - настроить подключение к БД по ssh/ssl (не RSA)
  - настроить CI/CD
  - функция чтения сообщений за определенный день/время
  - поддержка id чатов строк
  - сделать ChangeLog из коммитов
  - сделать id отдельными типами
  - tg timestamp отдельным типом
  - собрать образ pgbackup из https://github.com/mrThomasTeller/docker-postgres-backup-local
  - Сделать интеграционные тесты для логов
  - постепенное создание выжимки (gpt progress)
  - удалять из БД удалённые сообщения, редактировать отредактированные
  - удалять из БД сообщения когда бот выходит из чата
  - лог о том что бот вышел из чата
  - сделать unit-тесты для сервисов
  - Обернуть сервис TelegramBotService в фасад, который будет ставить отправляемые сообщения в очередь
  - доступ к dozzle по ssl

Возможно:
  - Поставить APM для сбора логов

Study:
  - Читать книгу "Совершенный код"
  - Изучить API Telegram
  - Почитать про обработку ошибок