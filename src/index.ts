import 'dotenv/config';
import { sendMessageToGpt } from './lib/gpt.js';
import { reEnumerateText, splitText } from './lib/text.js';
import TelegramConnection from './lib/TelegramConnection.js';
import { getFormattedMessage } from './lib/summarizeUtils.js';
import type TelegramBot from 'node-telegram-bot-api';
import { catchError } from './lib/async.js';
import Store from './lib/Store.js';

catchError(main());

async function main(): Promise<void> {
  const tg = new TelegramConnection();
  const store = new Store();

  tg.bot.onText(/.*/, async (msg) => {
    if (msg.text == null) return;

    const fromDate = Math.floor((Date.now() - 86400000) / 1000); // 24 hours ago
    const chatId = msg.chat.id;
    const messages = await store.getChatMessages(chatId, fromDate);

    if (msg.text.includes('/summarize')) {
      console.log(`–ó–∞–ø—Ä–æ—Å –Ω–∞ —Å–æ–∑–¥–∞–Ω–∏–µ –≤—ã–∂–∏–º–∫–∏ –∏–∑ —á–∞—Ç–∞ ${chatId}`);

      try {
        const text = messages.map(getFormattedMessage).join('\n');
        await printSummary(tg.bot, chatId, text);
      } catch (error) {
        console.log(error);
        await tg.bot.sendMessage(
          chatId,
          '–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ –∑–∞–ø—Ä–æ—Å–∞. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑.'
        );
      }
    } else if (!messages.some((m) => m.id === msg.message_id)) {
      await store.addMessage(chatId, msg);
    }
  });

  console.log('Summarize telegram bot started');
}

async function printSummary(bot: TelegramBot, chatId: number, text: string): Promise<void> {
  await bot.sendMessage(chatId, '‚öôÔ∏è –°–æ–±–∏—Ä–∞—é —Å–æ–æ–±—â–µ–Ω–∏—è –∑–∞ –ø–æ—Å–ª–µ–¥–Ω–∏–π –¥–µ–Ω—å...');

  const maxLength = 3400;
  const textParts = splitText(text, maxLength);
  const pointsCount =
    textParts.length === 1 ? 5 : textParts.length === 2 ? 4 : textParts.length === 3 ? 3 : 2;

  let count = 0;
  for (const part of textParts) {
    const response = await sendMessageToGpt({
      text: `–°–¥–µ–ª–∞–π –∫—Ä–∞—Ç–∫—É—é –≤—ã–∂–∏–º–∫—É —ç—Ç–∏—Ö —Å–æ–æ–±—â–µ–Ω–∏–π –≤ –≤–∏–¥–µ ${pointsCount} –ø—É–Ω–∫—Ç–æ–≤ –∏–¥—É—â–∏—Ö –≤ —Ö—Ä–æ–Ω–æ–ª–æ–≥–∏—á–µ—Å–∫–æ–º –ø–æ—Ä—è–¥–∫–µ. –ö–∞–∂–¥—ã–π –ø—É–Ω–∫—Ç - –æ–¥–Ω–æ –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏–µ –Ω–∞ —Ä—É—Å—Å–∫–æ–º —è–∑—ã–∫–µ —Å –ø–æ–¥—Ö–æ–¥—è—â–∏–º –ø–æ —Å–º—ã—Å–ª—É emoji –≤ –∫–æ–Ω—Ü–µ –±–µ–∑ —Ç–æ—á–∫–∏:\n${part}`,
      onBusy: async () => {
        await bot.sendMessage(chatId, 'üòÆ‚Äçüí® –ë–æ—Ç —É—Å–µ—Ä–¥–Ω–æ —Ç—Ä—É–¥–∏—Ç—Å—è, –Ω—É–∂–Ω–æ –Ω–µ–º–Ω–æ–∂–∫–æ –ø–æ–¥–æ–∂–¥–∞—Ç—å');
      },
      onBroken: async () => {
        await bot.sendMessage(
          chatId,
          'üíî –° –±–æ—Ç–æ–º —á—Ç–æ-—Ç–æ —Å–ª—É—á–∏–ª–æ—Å—å... –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ. –ú—ã –ø–æ—á–∏–Ω–∏–º –µ–≥–æ –∏ —Å–æ–æ–±—â–∏–º –≤–∞–º –∫–∞–∫ –º–æ–∂–Ω–æ —Å–∫–æ—Ä–µ–µ.'
        );
      },
    });

    count += 1;
    const text = reEnumerateText(response.trim(), (count - 1) * pointsCount + 1);
    if (count === 1) {
      await bot.sendMessage(chatId, `üî° –ö—Ä–∞—Ç–∫–∞—è –≤—ã–∂–∏–º–∫–∞:`);
    }
    await bot.sendMessage(chatId, text);
  }

  await bot.sendMessage(chatId, `üòå –≠—Ç–æ –≤—Å—ë`);
}
