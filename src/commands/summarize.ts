import { sendMessageToGpt } from '../lib/gpt.js';
import { reEnumerateText, splitText } from '../lib/text.js';
import type TelegramConnection from '../lib/TelegramConnection.js';
import { getFormattedMessage } from '../lib/summarizeUtils.js';
import type TelegramBot from 'node-telegram-bot-api';
import type Store from '../lib/Store.js';
import type TelegramBotService from '../services/TelegramBotService.js';
import { yesterday } from '../lib/utils.js';
import type GptService from '../services/GptService';

export default async function summarize({
  telegramConnection,
  gptService,
  store,
  msg,
}: {
  telegramConnection: TelegramConnection;
  gptService: GptService;
  store: Store;
  msg: TelegramBot.Message;
}): Promise<void> {
  const chatId = msg.chat.id;
  const messagesForLastDay = await store.getChatMessages(chatId, yesterday());
  console.info(`–ó–∞–ø—Ä–æ—Å –Ω–∞ —Å–æ–∑–¥–∞–Ω–∏–µ –≤—ã–∂–∏–º–∫–∏ –∏–∑ —á–∞—Ç–∞ ${chatId}`);

  try {
    const text = messagesForLastDay.map(getFormattedMessage).join('\n');
    await printSummary({ bot: telegramConnection.bot, gptService, chatId, text });
  } catch (error) {
    console.error(error);
    await telegramConnection.bot.sendMessage(chatId, getQueryProcessErrorMessage());
  }
}

export const getQueryProcessErrorMessage = (): string =>
  '–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ –∑–∞–ø—Ä–æ—Å–∞. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑.';

export const getStartSummarizeMessage = (): string => '‚öôÔ∏è –°–æ–±–∏—Ä–∞—é —Å–æ–æ–±—â–µ–Ω–∏—è –∑–∞ –ø–æ—Å–ª–µ–¥–Ω–∏–π –¥–µ–Ω—å...';

export const getEndSummarizeMessage = (): string => `üòå –≠—Ç–æ –≤—Å—ë`;

export const getSummaryHeader = (): string => `üî° –ö—Ä–∞—Ç–∫–∞—è –≤—ã–∂–∏–º–∫–∞:`;

export const getSummaryQueryMessage = (pointsCount: number, part: string): string =>
  `–°–¥–µ–ª–∞–π –∫—Ä–∞—Ç–∫—É—é –≤—ã–∂–∏–º–∫—É —ç—Ç–∏—Ö —Å–æ–æ–±—â–µ–Ω–∏–π –≤ –≤–∏–¥–µ ${pointsCount} –ø—É–Ω–∫—Ç–æ–≤ –∏–¥—É—â–∏—Ö –≤ —Ö—Ä–æ–Ω–æ–ª–æ–≥–∏—á–µ—Å–∫–æ–º –ø–æ—Ä—è–¥–∫–µ. –ö–∞–∂–¥—ã–π –ø—É–Ω–∫—Ç - –æ–¥–Ω–æ –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏–µ –Ω–∞ —Ä—É—Å—Å–∫–æ–º —è–∑—ã–∫–µ —Å –ø–æ–¥—Ö–æ–¥—è—â–∏–º –ø–æ —Å–º—ã—Å–ª—É emoji –≤ –∫–æ–Ω—Ü–µ –±–µ–∑ —Ç–æ—á–∫–∏:\n${part}`;

export const getTooManyRequestsToGptErrorMessage = (): string =>
  'üòÆ‚Äçüí® –ë–æ—Ç —É—Å–µ—Ä–¥–Ω–æ —Ç—Ä—É–¥–∏—Ç—Å—è, –Ω—É–∂–Ω–æ –Ω–µ–º–Ω–æ–∂–∫–æ –ø–æ–¥–æ–∂–¥–∞—Ç—å';

export const getMaxQueriesToGptExceeded = (): string =>
  'üíî –° –±–æ—Ç–æ–º —á—Ç–æ-—Ç–æ —Å–ª—É—á–∏–ª–æ—Å—å... –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ. –ú—ã –ø–æ—á–∏–Ω–∏–º –µ–≥–æ –∏ —Å–æ–æ–±—â–∏–º –≤–∞–º –∫–∞–∫ –º–æ–∂–Ω–æ —Å–∫–æ—Ä–µ–µ.';

async function printSummary({
  bot,
  gptService,
  chatId,
  text,
}: {
  bot: TelegramBotService;
  gptService: GptService;
  chatId: number;
  text: string;
}): Promise<void> {
  await bot.sendMessage(chatId, getStartSummarizeMessage());

  const maxLength = 3400;
  const textParts = splitText(text, maxLength);
  const pointsCount =
    textParts.length === 1 ? 5 : textParts.length === 2 ? 4 : textParts.length === 3 ? 3 : 2;

  let count = 0;
  for (const part of textParts) {
    const response = await sendMessageToGpt({
      gptService,
      text: getSummaryQueryMessage(pointsCount, part),
      onBusy: async () => {
        await bot.sendMessage(chatId, getTooManyRequestsToGptErrorMessage());
      },
      onBroken: async () => {
        await bot.sendMessage(chatId, getMaxQueriesToGptExceeded());
      },
    });

    count += 1;
    const text = reEnumerateText(response.trim(), (count - 1) * pointsCount + 1);
    if (count === 1) {
      await bot.sendMessage(chatId, getSummaryHeader());
    }
    await bot.sendMessage(chatId, text);
  }

  await bot.sendMessage(chatId, getEndSummarizeMessage());
}
